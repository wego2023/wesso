// Code generated by Kitex v0.5.1. DO NOT EDIT.

package hello

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	hello "github.com/wego2023/wesso/api/kitex_gen/hello"
)

func serviceInfo() *kitex.ServiceInfo {
	return helloServiceInfo
}

var helloServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Hello"
	handlerType := (*hello.Hello)(nil)
	methods := map[string]kitex.MethodInfo{
		"hello": kitex.NewMethodInfo(helloHandler, newHelloHelloArgs, newHelloHelloResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "hello",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func helloHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*hello.HelloHelloArgs)
	realResult := result.(*hello.HelloHelloResult)
	success, err := handler.(hello.Hello).Hello(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newHelloHelloArgs() interface{} {
	return hello.NewHelloHelloArgs()
}

func newHelloHelloResult() interface{} {
	return hello.NewHelloHelloResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Hello(ctx context.Context, req *hello.Request) (r *hello.Response, err error) {
	var _args hello.HelloHelloArgs
	_args.Req = req
	var _result hello.HelloHelloResult
	if err = p.c.Call(ctx, "hello", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
